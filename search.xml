<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mybatis中的插件使用]]></title>
    <url>%2F2017%2F04%2F21%2Fmybatis%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[在使用Mybatis作为日常的ORM框架时，会经常碰到一些定制化的需求，比如在检索数据时加上一些 userContext 的credential，以限定检索的范围，又或者在插入数据时，需要加上审计相关的信息，这个时候Mybatis强大的插件机制就派上用场了，Mybatis-pagehelper中就使用了这样的插件机制来做分页. 比如有这样一个需求，当更新一条记录时，记录下谁更新的，更新时间，属于那个租户下的，我们可以认为这就是个拦截器，针对创建时间，创建用户，以下就是这个小例子： mybatis-config.xml 1234567&lt;configuration&gt; .... &lt;plugins&gt; &lt;plugin interceptor=&quot;com.test.mybatis.TimestampInterceptor&quot;/&gt; &lt;/plugins&gt; &lt;/configuration&gt; TimestampInterceptor.java 在这里主要是实现#intercept方法和#plugin方法，前面的方式主要用来处理核心拦截业务处理， plugin用来把这个拦截器加入到 Mybatis的整个拦截器链，这样拦截器才会起作用，否则不处在Mybatis的拦截器链中，是不能发挥拦截器的作用的 12345678910111213141516171819202122232425262728293031323334353637383940@Intercepts(&#123; @Signature(type = Executor.class, method = "update", args = &#123; MappedStatement.class, Object.class &#125;)&#125;)public class TimestampInterceptor implements Interceptor &#123; /** the main entry of interceptor */ @Override public Object intercept()&#123; //do what you need do in this interceptor here Object parameterObj = invocation.getArgs()[1]; SqlCommandType type = ((MappedStatement) invocation.getArgs()[0]).getSqlCommandType(); if (parameterObj instanceof BaseEntity) &#123; populateDate(parameterObj, type); &#125; &#125; private void populateData(Object param, SqlCommandType commandType) &#123; if (!(obj instanceof BaseEntity)) &#123; return; &#125; BaseEntity entity = (BaseEntity) obj; RequestInfo context = RequestContext.get(); UUID userId = context == null ? null : context.getUserContext().getUserId().asUUID(); UUID tenantId = context == null ? null : context.getCompanyId().asUUID(); switch (commandType) &#123; case INSERT: entity.setCreatedBy(userId); entity.setCreatedTime(Instant.now()); break; case UPDATE: entity.setUpdatedBy(userId); entity.setUpdatedTime(Instant.now()); break; &#125; &#125; @Override public Object plugin(Object target) &#123; return Plugin.wrap(target, this); &#125;&#125; BaseEntity.java 12345678public class BaseEntity&#123; private UUID createdBy; private UUID updatedBy; private Instant createdTime; private Instant updatedTime; private UUID tenantId; //ignore other fields&#125; AuctionRecord.java 123public class AuctionRecord extends BaseEntity &#123; //other fields in this entity&#125; 使用过程还是很简单的，如下面的例子： AuctionRecordDAOImpl.java 12345678public AuctionRecordDAOImpl implements AuctionRecordDAO &#123; //ignore other methods @Autowired private AuctionRecordMapper auctionRecordMapper; void create(AuctionRecord record) &#123; auctionRecordMapper.insert(record); &#125;&#125; 当插入一条AuctionRecord的时候就会触发 TimestampInterceptor 这个拦截器，并且执行拦截器中的#intercept方法，在上面的例子中实现的功能是插入时间，创建人等信息. 至于Mybatis的拦截器具体是怎么实现的，下面会有分享.]]></content>
  </entry>
</search>